AWSTemplateFormatVersion: '2010-09-09'
Description: The AWS CFN template Cloudway Monitoring Stack

Parameters:
  MetricNameSpace:
    Type: String
    Default: Cloudway/Serverless/Monitoring
  Environment:
    Type: String
    Default: dev
  ApplicationName:
    Type: String
    Default: cloudway-scc
  MonitorEmail:
    Type: String
    Description: This email will be used for monitoring notifications
  IncludeTags:
    Type: String
    Default: ""
  ExcludeTags:
    Type: String
    Default: 'cloudway-scc-stack'
  ArtifactBucket:
    Type: String
  ArtifactKey:
    Type: String

Resources:
  # ============= IAM ============== #
  IamRoleKinesisAnalytics:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - kinesisanalytics.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
          - PolicyName: !Sub "${Environment}-${ApplicationName}-kinesisanalytics-policy"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - kinesis:*
                    - lambda:*
                  Resource: "*"
      Path: "/"
      RoleName: !Sub "${Environment}-${ApplicationName}-kinesis-analytics-role"

  IamRoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub "${Environment}-${ApplicationName}-lambda-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:*
                  - lambda:GetFunctionConfiguration
                  - lambda:PutFunctionConcurrency
                  - dynamodb:DescribeTable
                  - tag:getResources
                  - tag:getTagKeys
                  - tag:getTagValues
                  - pricing:GetProducts
                  - pricing:DescribeServices
                  - pricing:GetAttributeValues
                  - SNS:Publish
                  - kinesis:CreateStream
                  - kinesis:DescribeStream
                  - kinesis:PutRecord
                  - kinesisanalytics:CreateApplication
                  - kinesisanalytics:DescribeApplication
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt IamRoleKinesisAnalytics.Arn
      Path: "/"
      RoleName: !Sub "${Environment}-${ApplicationName}-lambda-role"

  # ============= LAMBDA ============== #
  ResourceCostCalculatorFn:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Ref ArtifactKey
      FunctionName: !Sub "${Environment}-${ApplicationName}-resource-cost-calculator"
      Handler: index.resourceCostCalculator
      MemorySize: 1024
      Role: !GetAtt IamRoleLambdaExecution.Arn
      Runtime: nodejs10.x
      Timeout: 300
      Environment:
        Variables:
          METRICS_NAMESPACE: !Ref MetricNameSpace
          ACTIONABLE_TOPIC_ARN: !Ref SNSTopicSccInhibitor
          KINESIS_ROLE: !GetAtt IamRoleKinesisAnalytics.Arn
          ANOMALY_DETECTOR_LAMBDA_ARN: !GetAtt AnomalyDetectorFn.Arn
          INCLUDE_TAGS: !Ref IncludeTags
          EXCLUDE_TAGS: !Ref ExcludeTags
      Tags:
        - Key: "scc-cloudway-stack"
          Value: "true"
    DependsOn:
      - IamRoleLambdaExecution
      - IamRoleKinesisAnalytics

  ResourceThrottlerFn:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Ref ArtifactKey
      FunctionName: !Sub "${Environment}-${ApplicationName}-resource-throttler"
      Handler: index.resourceThrottler
      MemorySize: 1024
      Role: !GetAtt IamRoleLambdaExecution.Arn
      Runtime: nodejs10.x
      Timeout: 300
      Environment:
        Variables:
          METRICS_NAMESPACE: !Ref MetricNameSpace
      Tags:
        - Key: "scc-cloudway-stack"
          Value: "true"
    DependsOn:
    - IamRoleLambdaExecution

  AnomalyDetectorFn:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Ref ArtifactKey
      FunctionName: !Sub "${Environment}-${ApplicationName}-anomaly-detector"
      Handler: index.anomalyDetector
      MemorySize: 1024
      Role: !GetAtt IamRoleLambdaExecution.Arn
      Runtime: nodejs10.x
      Timeout: 300
      Environment:
        Variables:
          METRICS_NAMESPACE: !Ref MetricNameSpace
      Tags:
        - Key: "scc-cloudway-stack"
          Value: "true"
    DependsOn:
      - IamRoleLambdaExecution

  CostStreamerFn:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Ref ArtifactKey
      FunctionName: !Sub "${Environment}-${ApplicationName}-cost-streamer"
      Handler: index.costStreamer
      MemorySize: 1024
      Role: !GetAtt IamRoleLambdaExecution.Arn
      Runtime: nodejs10.x
      Timeout: 300
      Environment:
        Variables:
          METRICS_NAMESPACE: !Ref MetricNameSpace
          KINESIS_STREAM_NAME: !Ref ServerlessCostStream
          INCLUDE_TAGS: !Ref IncludeTags
          EXCLUDE_TAGS: !Ref ExcludeTags
      Tags:
        - Key: "scc-cloudway-stack"
          Value: "true"
    DependsOn:
      - IamRoleLambdaExecution

  # ============= TRIGGERS ============== #
  ResourceCostCalculatorEventsRuleSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
      - Input: '{"scc-monitor-group":"scc-monitor-group"}'
        Arn: !GetAtt ResourceCostCalculatorFn.Arn
        Id: calculatorSchedule
  ResourceCostCalculatorPermissionEventsRuleSchedule:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ResourceCostCalculatorFn.Arn
      Action: lambda:InvokeFunction
      Principal: !Sub "events.${AWS::URLSuffix}"
      SourceArn: !GetAtt ResourceCostCalculatorEventsRuleSchedule.Arn
  CostStreamerEventsRuleSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
        - Input: ''
          Arn: !GetAtt CostStreamerFn.Arn
          Id: costStreamerSchedule
  CostStreamerFnPermissionEventsRuleSchedule:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CostStreamerFn.Arn
      Action: lambda:InvokeFunction
      Principal: !Sub "events.${AWS::URLSuffix}"
      SourceArn: !GetAtt CostStreamerEventsRuleSchedule.Arn

  # ============= SNS ============== #
  SNSTopicSccInhibitor:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${Environment}-${ApplicationName}-topic"
      DisplayName: ''
      Subscription:
        - Endpoint: !GetAtt ResourceThrottlerFn.Arn
          Protocol: lambda
        - Endpoint: !Ref MonitorEmail
          Protocol: email

  SNSTopicSccInhibitorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ResourceThrottlerFn.Arn
      Action: lambda:InvokeFunction
      Principal: !Sub "sns.${AWS::URLSuffix}"
      SourceArn: !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${Environment}-${ApplicationName}-topic"

  # ============= KINESIS ============== #
  ServerlessCostStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub "${Environment}-${ApplicationName}-stream"
      RetentionPeriodHours: 24
      ShardCount: 1
  ServerlessAnomalyApplicationOutput:
    Type: AWS::KinesisAnalytics::ApplicationOutput
    Properties:
      ApplicationName: !Ref ServerlessAnomalyApplication
      Output:
        Name: DESTINATION_SQL_STREAM
        DestinationSchema:
          RecordFormatType: JSON
        LambdaOutput:
          ResourceARN: !GetAtt AnomalyDetectorFn.Arn
          RoleARN: !GetAtt IamRoleKinesisAnalytics.Arn
  ServerlessAnomalyApplication:
    Type: AWS::KinesisAnalytics::Application
    Properties:
      ApplicationName: !Sub "${Environment}-${ApplicationName}-application"
      ApplicationDescription: Applies Random Cut Forest Algorithm for anomaly detection
      ApplicationCode: |
        --Creates a temporary stream.
        CREATE OR REPLACE STREAM "TEMP_STREAM" (
        "cost"            DOUBLE,
        "recordTimestamp" TIMESTAMP,
        "ANOMALY_SCORE"   DOUBLE);

        --Creates another stream for application output.
        CREATE OR REPLACE STREAM "DESTINATION_SQL_STREAM" (
        "cost"            DOUBLE,
        "recordTimestamp" TIMESTAMP,
        "ANOMALY_SCORE"   DOUBLE);

        -- Compute an anomaly score for each record in the input stream using Random Cut Forest
        CREATE OR REPLACE PUMP "STREAM_PUMP" AS INSERT INTO "TEMP_STREAM"
        SELECT STREAM SOURCE."cost", SOURCE."recordTimestamp", rcf."ANOMALY_SCORE" FROM
        TABLE(RANDOM_CUT_FOREST(
        CURSOR(SELECT STREAM "cost" FROM SOURCE_SQL_STREAM_001), 80, 256, 100000, 1
        )
        ) AS rcf, SOURCE_SQL_STREAM_001 AS SOURCE;

        -- Sort records by descending anomaly score, insert into output stream
        CREATE OR REPLACE PUMP "OUTPUT_PUMP" AS
        INSERT INTO "DESTINATION_SQL_STREAM"
        SELECT STREAM * FROM "TEMP_STREAM"
        ORDER BY FLOOR("TEMP_STREAM".ROWTIME TO SECOND), ANOMALY_SCORE DESC;

      Inputs:
        - NamePrefix: SOURCE_SQL_STREAM
          KinesisStreamsInput:
            ResourceARN: !GetAtt ServerlessCostStream.Arn
            RoleARN: !GetAtt IamRoleKinesisAnalytics.Arn
          InputSchema:
            RecordColumns:
               - Name: cost
                 SqlType: DOUBLE
                 Mapping: $.cost
               - Name: recordTimestamp
                 SqlType: TIMESTAMP
                 Mapping: $.timestamp
            RecordFormat:
              RecordFormatType: JSON
              MappingParameters:
                JSONMappingParameters:
                  RecordRowPath: $
            RecordEncoding: UTF-8

