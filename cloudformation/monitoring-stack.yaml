AWSTemplateFormatVersion: '2010-09-09'
Description: The AWS CFN template Cloudway Monitoring Stack

Parameters:
  MetricNameSpace:
    Type: String
    Default: Cloudway/Serverless/Monitoring
  Environment:
    Type: String
    Default: dev
  ApplicationName:
    Type: String
    Default: cloudway-scc
  MonitorEmail:
    Type: String
    Description: This email will be used for monitoring notifications

Mappings:
  DeploymentPath:
    Latest:
      BucketName: "scc-root-stack-serverlessdeploymentbucket-2s7et78s8ity"
      BucketKey: "latest/functions.zip"

Resources:
  # ============= IAM ============== #
  IamRoleKinesisAnalytics:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - kinesisanalytics.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
          - PolicyName: !Sub "${Environment}-${ApplicationName}-kinesisanalytics-policy"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - kinesis:*
                    - lambda:*
                  Resource: "*"
      Path: "/"
      RoleName: !Sub "${Environment}-${ApplicationName}-kinesis-analytics-role"

  IamRoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub "${Environment}-${ApplicationName}-lambda-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:*
                  - lambda:GetFunctionConfiguration
                  - lambda:PutFunctionConcurrency
                  - dynamodb:DescribeTable
                  - tag:getResources
                  - tag:getTagKeys
                  - tag:getTagValues
                  - pricing:GetProducts
                  - pricing:DescribeServices
                  - pricing:GetAttributeValues
                  - SNS:Publish
                Resource: "*"
      Path: "/"
      RoleName: !Sub "${Environment}-${ApplicationName}-lambda-role"

  # ============= LAMBDA ============== #
  CalculatorLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !FindInMap [DeploymentPath, Latest, BucketName]
        S3Key: !FindInMap [DeploymentPath, Latest, BucketKey]
      FunctionName: !Sub "${Environment}-${ApplicationName}-calculator"
      Handler: index.calculator
      MemorySize: 1024
      Role: !GetAtt IamRoleLambdaExecution.Arn
      Runtime: nodejs8.10
      Timeout: 300
      Environment:
        Variables:
          METRICS_NAMESPACE: !Ref MetricNameSpace
          ACTIONABLE_TOPIC_ARN: !Ref SNSTopicSccInhibitor
          KINESIS_ROLE: !GetAtt IamRoleKinesisAnalytics.Arn
          ANOMALY_DETECTOR_LAMBDA_ARN: !GetAtt AnomalyDetectorLambdaFunction.Arn
    DependsOn:
      - IamRoleLambdaExecution
      - IamRoleKinesisAnalytics

  InhibitorLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !FindInMap [DeploymentPath, Latest, BucketName]
        S3Key: !FindInMap [DeploymentPath, Latest, BucketKey]
      FunctionName: !Sub "${Environment}-${ApplicationName}-inhibitor"
      Handler: index.inhibitor
      MemorySize: 1024
      Role: !GetAtt IamRoleLambdaExecution.Arn
      Runtime: nodejs8.10
      Timeout: 300
      Environment:
        Variables:
          METRICS_NAMESPACE: !Ref MetricNameSpace
    DependsOn:
    - IamRoleLambdaExecution

  AnomalyDetectorLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !FindInMap [DeploymentPath, Latest, BucketName]
        S3Key: !FindInMap [DeploymentPath, Latest, BucketKey]
      FunctionName: !Sub "${Environment}-${ApplicationName}-anomaly-detector"
      Handler: index.anomalyDetector
      MemorySize: 1024
      Role: !GetAtt IamRoleLambdaExecution.Arn
      Runtime: nodejs8.10
      Timeout: 300
      Environment:
        Variables:
          METRICS_NAMESPACE: !Ref MetricNameSpace
    DependsOn:
      - IamRoleLambdaExecution

  # ============= TRIGGERS ============== #
  CalculatorEventsRuleSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
      - Input: '{"scc-monitor-group":"scc-monitor-group"}'
        Arn: !GetAtt CalculatorLambdaFunction.Arn
        Id: calculatorSchedule
  CalculatorLambdaPermissionEventsRuleSchedule:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CalculatorLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: !Sub "events.${AWS::URLSuffix}"
      SourceArn: !GetAtt CalculatorEventsRuleSchedule.Arn

  # ============= SNS ============== #
  SNSTopicSccInhibitor:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${Environment}-${ApplicationName}-topic"
      DisplayName: ''
      Subscription:
        - Endpoint: !GetAtt InhibitorLambdaFunction.Arn
          Protocol: lambda
        - Endpoint: !Ref MonitorEmail
          Protocol: email

  SNSTopicSccInhibitorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt InhibitorLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: !Sub "sns.${AWS::URLSuffix}"
      SourceArn: !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${Environment}-${ApplicationName}-topic"
